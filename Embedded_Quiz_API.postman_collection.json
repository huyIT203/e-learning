{
  "info": {
    "_postman_id": "embedded-quiz-api-collection",
    "name": "Embedded Quiz API - Fixed Testing",
    "description": "Complete API collection for testing Embedded Quiz system with debugging capabilities",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8081",
      "type": "string"
    },
    {
      "key": "lesson_id",
      "value": "64a1b2c3d4e5f6789012345",
      "type": "string"
    },
    {
      "key": "quiz_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "attempt_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "question_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register Test User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"fullName\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    console.log('‚úÖ Registration successful or user already exists');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Registration response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.collectionVariables.set('auth_token', response.token);",
                  "        console.log('‚úÖ Login successful, token saved');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Login failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üéØ Quiz Testing Flow",
      "item": [
        {
          "name": "1. Create Quick Quiz",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lessonId\": \"{{lesson_id}}\",\n  \"title\": \"Test Quiz - Multiple Choice\",\n  \"description\": \"Quiz ƒë·ªÉ test scoring logic\",\n  \"type\": \"MULTIPLE_CHOICE\",\n  \"position\": 1,\n  \"isEmbedded\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/create-quick",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "create-quick"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('quiz_id', response.id);",
                  "        console.log('‚úÖ Quiz created with ID:', response.id);",
                  "        console.log('üìù Title:', response.title);",
                  "        console.log('üéØ Type:', response.type);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to create quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Get Quiz (Confirm Question ID)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/{{quiz_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "{{quiz_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.questions && response.questions.length > 0) {",
                  "        const question = response.questions[0];",
                  "        pm.collectionVariables.set('question_id', question.id);",
                  "        console.log('‚úÖ Question ID saved:', question.id);",
                  "        console.log('üìù Question Text:', question.questionText);",
                  "        console.log('üéØ Correct Answer Index:', question.correctAnswer);",
                  "        console.log('üìã Available Options:');",
                  "        question.options.forEach((option, index) => {",
                  "            const marker = option.correct ? '‚úÖ (CORRECT)' : '‚ùå';",
                  "            console.log(`  Index ${index}: ${option.text} ${marker}`);",
                  "        });",
                  "        console.log('');",
                  "        console.log('üß™ TEST PLAN:');",
                  "        console.log('- Correct answer should be index:', question.correctAnswer);",
                  "        console.log('- Wrong answers: any index except', question.correctAnswer);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to get quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Start Quiz",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/{{quiz_id}}/start?lessonId={{lesson_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "{{quiz_id}}", "start"],
              "query": [
                {
                  "key": "lessonId",
                  "value": "{{lesson_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.attemptId) {",
                  "        pm.collectionVariables.set('attempt_id', response.attemptId);",
                  "        console.log('‚úÖ Quiz started with attempt ID:', response.attemptId);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to start quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Save Answer (Test WRONG Answer) ‚ùå",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"questionId\": \"{{question_id}}\",\n  \"answer\": \"0\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/attempts/{{attempt_id}}/save",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "attempts", "{{attempt_id}}", "save"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('üìù WRONG Answer saved (index \"0\")');",
                  "    console.log('Response:', response);",
                  "    console.log('‚ö†Ô∏è This should be WRONG for Multiple Choice quiz!');",
                  "} else {",
                  "    console.log('‚ùå Failed to save answer:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Submit Quiz (With WRONG Answer)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"{{question_id}}\": \"0\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/attempts/{{attempt_id}}/submit",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "attempts", "{{attempt_id}}", "submit"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('üéØ QUIZ SUBMITTED WITH WRONG ANSWER');",
                  "    console.log('==========================================');",
                  "    console.log('üìä SCORING RESULTS:');",
                  "    console.log('Score:', response.score);",
                  "    console.log('Percentage:', response.percentage + '%');",
                  "    console.log('Correct Answers:', response.correctAnswers);",
                  "    console.log('Total Questions:', response.totalQuestions);",
                  "    console.log('Status:', response.status);",
                  "    console.log('==========================================');",
                  "    ",
                  "    // BUG DETECTION",
                  "    if (response.percentage > 0) {",
                  "        console.log('üö®üö® BUG DETECTED! üö®üö®');",
                  "        console.log('‚ùå Wrong answer got points!');",
                  "        console.log('‚ùå Expected: 0% score');",
                  "        console.log('‚ùå Actual:', response.percentage + '%');",
                  "        console.log('üîß NEED TO FIX SCORING LOGIC!');",
                  "    } else {",
                  "        console.log('‚úÖ CORRECT BEHAVIOR');",
                  "        console.log('‚úÖ Wrong answer correctly got 0 points');",
                  "    }",
                  "    ",
                  "    if (response.correctAnswers > 0) {",
                  "        console.log('üö® BUG: correctAnswers should be 0 but got:', response.correctAnswers);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to submit quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Get Quiz Result",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/{{quiz_id}}/result",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "{{quiz_id}}", "result"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('üìä FINAL QUIZ RESULT:');",
                  "    console.log('Score:', response.score);",
                  "    console.log('Percentage:', response.percentage + '%');",
                  "    console.log('Status:', response.status);",
                  "    console.log('Attempts:', response.attempts);",
                  "} else {",
                  "    console.log('‚ùå Failed to get result:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üß™ Test Correct Answer",
      "item": [
        {
          "name": "Create New Quiz for Correct Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lessonId\": \"{{lesson_id}}\",\n  \"title\": \"Test Quiz - Correct Answer\",\n  \"description\": \"Test v·ªõi ƒë√°p √°n ƒë√∫ng\",\n  \"type\": \"MULTIPLE_CHOICE\",\n  \"position\": 2,\n  \"isEmbedded\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/create-quick",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "create-quick"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('quiz_id', response.id);",
                  "        console.log('‚úÖ New quiz created for correct answer test:', response.id);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to create quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Quiz Structure",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/{{quiz_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "{{quiz_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.questions && response.questions.length > 0) {",
                  "        const question = response.questions[0];",
                  "        pm.collectionVariables.set('question_id', question.id);",
                  "        console.log('‚úÖ Question ID saved:', question.id);",
                  "        console.log('üéØ Will test CORRECT answer:', question.correctAnswer);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to get quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Start Quiz",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/{{quiz_id}}/start?lessonId={{lesson_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "{{quiz_id}}", "start"],
              "query": [
                {
                  "key": "lessonId",
                  "value": "{{lesson_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.attemptId) {",
                  "        pm.collectionVariables.set('attempt_id', response.attemptId);",
                  "        console.log('‚úÖ Quiz started:', response.attemptId);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to start quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Save CORRECT Answer ‚úÖ",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"questionId\": \"{{question_id}}\",\n  \"answer\": \"1\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/attempts/{{attempt_id}}/save",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "attempts", "{{attempt_id}}", "save"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('üìù CORRECT Answer saved (index \"1\")');",
                  "    console.log('Response:', response);",
                  "} else {",
                  "    console.log('‚ùå Failed to save answer:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Submit Quiz (With CORRECT Answer)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"{{question_id}}\": \"1\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/embedded-quiz/attempts/{{attempt_id}}/submit",
              "host": ["{{base_url}}"],
              "path": ["api", "embedded-quiz", "attempts", "{{attempt_id}}", "submit"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('üéØ QUIZ SUBMITTED WITH CORRECT ANSWER');",
                  "    console.log('==========================================');",
                  "    console.log('üìä SCORING RESULTS:');",
                  "    console.log('Score:', response.score);",
                  "    console.log('Percentage:', response.percentage + '%');",
                  "    console.log('Correct Answers:', response.correctAnswers);",
                  "    console.log('Total Questions:', response.totalQuestions);",
                  "    console.log('Status:', response.status);",
                  "    console.log('==========================================');",
                  "    ",
                  "    // CORRECT ANSWER VALIDATION",
                  "    if (response.percentage === 100) {",
                  "        console.log('‚úÖ CORRECT BEHAVIOR');",
                  "        console.log('‚úÖ Correct answer got 100% score');",
                  "    } else {",
                  "        console.log('üö® POTENTIAL BUG!');",
                  "        console.log('‚ùå Correct answer should get 100% but got:', response.percentage + '%');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to submit quiz:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîß Debug & Troubleshooting",
      "item": [
        {
          "name": "Check Server Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/check",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Server is running on port 8081');",
                  "} else {",
                  "    console.log('‚ùå Server connection issue:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Variables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/check",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üîç CURRENT VARIABLES:');",
                  "console.log('base_url:', pm.collectionVariables.get('base_url'));",
                  "console.log('lesson_id:', pm.collectionVariables.get('lesson_id'));",
                  "console.log('auth_token:', pm.collectionVariables.get('auth_token') ? 'SET' : 'NOT SET');",
                  "console.log('quiz_id:', pm.collectionVariables.get('quiz_id'));",
                  "console.log('question_id:', pm.collectionVariables.get('question_id'));",
                  "console.log('attempt_id:', pm.collectionVariables.get('attempt_id'));"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
} 