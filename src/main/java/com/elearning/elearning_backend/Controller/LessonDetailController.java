package com.elearning.elearning_backend.Controller;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.elearning.elearning_backend.Enum.Role;
import com.elearning.elearning_backend.Model.Course;
import com.elearning.elearning_backend.Model.Lesson;
import com.elearning.elearning_backend.Model.User;
import com.elearning.elearning_backend.Repository.UserRepository;
import com.elearning.elearning_backend.Service.CourseService;
import com.elearning.elearning_backend.Service.LessonProgressService;
import com.elearning.elearning_backend.Service.LessonService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class LessonDetailController {
    private final LessonService lessonService;
    private final CourseService courseService;
    private final LessonProgressService lessonProgressService;
    private final UserRepository userRepository;

    private User getCurrentUser() {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null && auth.isAuthenticated() && !auth.getName().equals("anonymousUser")) {
                String email = auth.getName();
                return userRepository.findByEmail(email).orElse(null);
            }
        } catch (Exception e) {
            // User not authenticated
        }
        return null;
    }

    @GetMapping("/lessons/{lessonId}")
    public String getLessonDetail(@PathVariable String lessonId, Model model) {
        Optional<Lesson> optionalLesson = lessonService.getLessonById(lessonId);
        if (optionalLesson.isEmpty()) return "error/404";

        Lesson lesson = optionalLesson.get();
        
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            // Ch∆∞a ƒëƒÉng nh·∫≠p - chuy·ªÉn v·ªÅ trang kh√≥a h·ªçc
            return "redirect:/course/" + lesson.getCourseId() + "/lessons";
        }
        
        // Ki·ªÉm tra role v√† quy·ªÅn truy c·∫≠p
        Course course = courseService.getCourseById(lesson.getCourseId());
        if (course == null) {
            return "error/404";
        }
        
        // Logic ki·ªÉm tra quy·ªÅn truy c·∫≠p theo role
        if (currentUser.getRole() == Role.STUDENT) {
            // V·ªõi STUDENT: ki·ªÉm tra xem ƒë√£ enroll v√† b·∫Øt ƒë·∫ßu kh√≥a h·ªçc ch∆∞a
            if (!course.getEnrolledUserIds().contains(currentUser.getId())) {
                // Ch∆∞a enroll - chuy·ªÉn v·ªÅ trang course detail
                return "redirect:/course/" + lesson.getCourseId();
            }
            
            boolean courseStarted = lessonProgressService.hasCourseStarted(currentUser.getId(), lesson.getCourseId());
            if (!courseStarted) {
                // Ch∆∞a b·∫Øt ƒë·∫ßu kh√≥a h·ªçc - chuy·ªÉn v·ªÅ trang kh√≥a h·ªçc
                return "redirect:/course/" + lesson.getCourseId() + "/lessons";
            }
        } else if (currentUser.getRole() == Role.TEACHER) {
            // V·ªõi TEACHER: ch·ªâ cho ph√©p truy c·∫≠p kh√≥a h·ªçc c·ªßa m√¨nh
            if (!course.getCreatedByUserId().equals(currentUser.getId())) {
                return "error/403";
            }
        } else if (currentUser.getRole() == Role.ADMIN) {
            // ADMIN c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£
        } else {
            // Role kh√°c kh√¥ng ƒë∆∞·ª£c ph√©p
            return "error/403";
        }
        
        model.addAttribute("lesson", lesson);

        // Mark lesson as accessed (ch·ªâ cho STUDENT)
        if (currentUser.getRole() == Role.STUDENT) {
            lessonProgressService.markLessonCompleted(currentUser.getId(), lesson.getCourseId(), lessonId);
        }

        // ∆Øu ti√™n hi·ªÉn th·ªã contentHtml n·∫øu c√≥, n·∫øu kh√¥ng th√¨ parse t·ª´ file
        String bodyHtml = "";
        if (lesson.getContentHtml() != null && !lesson.getContentHtml().isEmpty()) {
            bodyHtml = lesson.getContentHtml();
        } else {
            try {
                if (lesson.getBodyPath() != null) {
                    if (lesson.getBodyPath().endsWith(".md")) {
                        bodyHtml = lessonService.parseMarkdown(lesson.getBodyPath());
                    } else if (lesson.getBodyPath().endsWith(".docx")) {
                        bodyHtml = lessonService.parseDocx(lesson.getBodyPath());
                    }
                }
            } catch (IOException e) {
                bodyHtml = "<p>L·ªói khi ƒë·ªçc n·ªôi dung b√†i h·ªçc.</p>";
                e.printStackTrace();
            }
        }

        model.addAttribute("bodyHtml", bodyHtml);

        if (course != null) {
            model.addAttribute("courseTitle", course.getTitle());
            model.addAttribute("course", course);
            
            // Th√™m danh s√°ch t·∫•t c·∫£ b√†i h·ªçc c·ªßa kh√≥a h·ªçc ƒë·ªÉ hi·ªÉn th·ªã trong sidebar
            List<Lesson> allLessons = lessonService.getLessonsByCourseId(lesson.getCourseId());
            model.addAttribute("allLessons", allLessons);
        }

        model.addAttribute("currentUser", currentUser);
        return "shared/lesson_detail";
    }

    @GetMapping("/courses/{courseId}/start")
    public String startCourse(@PathVariable String courseId, Model model) {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            return "redirect:/login";
        }
        
        // Ch·ªâ STUDENT m·ªõi c√≥ th·ªÉ start course
        if (currentUser.getRole() != Role.STUDENT) {
            return "error/403";
        }
        
        Course course = courseService.getCourseById(courseId);
        if (course == null) {
            return "error/404";
        }
        
        // Ki·ªÉm tra xem ƒë√£ enroll ch∆∞a
        if (!course.getEnrolledUserIds().contains(currentUser.getId())) {
            return "redirect:/course/" + courseId;
        }
        
        List<Lesson> lessons = lessonService.getLessonsByCourseId(courseId);
        if (lessons.isEmpty()) {
            return "redirect:/course/" + courseId + "/lessons";
        }
        
        // Ki·ªÉm tra xem ƒë√£ b·∫Øt ƒë·∫ßu kh√≥a h·ªçc ch∆∞a
        boolean courseStarted = lessonProgressService.hasCourseStarted(currentUser.getId(), courseId);
        
        if (courseStarted) {
            // Ti·∫øp t·ª•c t·ª´ b√†i h·ªçc cu·ªëi c√πng ƒë√£ truy c·∫≠p
            String lastAccessedLessonId = lessonProgressService.getLastAccessedLessonId(currentUser.getId(), courseId);
            if (lastAccessedLessonId != null) {
                System.out.println("üü¢ Continuing course - redirecting to last accessed lesson: " + lastAccessedLessonId);
                return "redirect:/lessons/" + lastAccessedLessonId;
            }
        } else {
            // B·∫Øt ƒë·∫ßu kh√≥a h·ªçc m·ªõi - t·∫°o progress tracking cho b√†i h·ªçc ƒë·∫ßu ti√™n
            String firstLessonId = lessons.get(0).getId();
            System.out.println("üü¢ Starting new course for user: " + currentUser.getEmail() + ", courseId: " + courseId);
            System.out.println("üü¢ Creating initial progress for first lesson: " + firstLessonId);
            
            // T·∫°o progress entry cho b√†i h·ªçc ƒë·∫ßu ti√™n (ch∆∞a completed)
            lessonProgressService.markLessonAccessed(currentUser.getId(), courseId, firstLessonId);
        }
        
        // B·∫Øt ƒë·∫ßu t·ª´ b√†i h·ªçc ƒë·∫ßu ti√™n
        String firstLessonId = lessons.get(0).getId();
        System.out.println("üü¢ Redirecting to first lesson: " + firstLessonId);
        return "redirect:/lessons/" + firstLessonId;
    }
}
